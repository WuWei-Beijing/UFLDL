function [cost,grad] = sparseAutoencoderCost(theta, visibleSize, hiddenSize, ...
                                             lambda, sparsityParam, beta, data)

% visibleSize: the number of input units (probably 64) 
% hiddenSize: the number of hidden units (probably 25) 
% lambda: weight decay parameter
% sparsityParam: The desired average activation for the hidden units (denoted in the lecture
%                           notes by the greek alphabet rho, which looks like a lower-case "p").
% beta: weight of sparsity penalty term
% data: Our 64x10000 matrix containing the training data.  So, data(:,i) is the i-th training example. 
  
% The input theta is a vector (because minFunc expects the parameters to be a vector). 
% We first convert theta to the (W1, W2, b1, b2) matrix/vector format, so that this 
% follows the notation convention of the lecture notes. 

W1 = reshape(theta(1:hiddenSize*visibleSize), hiddenSize, visibleSize);
W2 = reshape(theta(hiddenSize*visibleSize+1:2*hiddenSize*visibleSize), visibleSize, hiddenSize);
b1 = theta(2*hiddenSize*visibleSize+1:2*hiddenSize*visibleSize+hiddenSize);
b2 = theta(2*hiddenSize*visibleSize+hiddenSize+1:end);

% Cost and gradient variables (your code needs to compute these values). 
% Here, we initialize them to zeros. 
cost = 0;
W1grad = zeros(size(W1)); 
W2grad = zeros(size(W2));
b1grad = zeros(size(b1)); 
b2grad = zeros(size(b2));

%% ---------- YOUR CODE HERE --------------------------------------
%  Instructions: Compute the cost/optimization objective J_sparse(W,b) for the Sparse Autoencoder,
%                and the corresponding gradients W1grad, W2grad, b1grad, b2grad.
%
% W1grad, W2grad, b1grad and b2grad should be computed using backpropagation.
% Note that W1grad has the same dimensions as W1, b1grad has the same dimensions
% as b1, etc.  Your code should set W1grad to be the partial derivative of J_sparse(W,b) with
% respect to W1.  I.e., W1grad(i,j) should be the partial derivative of J_sparse(W,b) 
% with respect to the input parameter W1(i,j).  Thus, W1grad should be equal to the term 
% [(1/m) \Delta W^{(1)} + \lambda W^{(1)}] in the last block of pseudo-code in Section 2.2 
% of the lecture notes (and similarly for W2grad, b1grad, b2grad).
% 
% Stated differently, if we were using batch gradient descent to optimize the parameters,
% the gradient descent update to W1 would be W1 := W1 - alpha * W1grad, and similarly for W2, b1, b2. 
% 

%{
%step1:precompute rou_j(j=1,2...,hiddenSize)
rou=zeros(hiddenSize,size(data,2));
%rou=zeros(hiddenSize,10);
%for i=1:10
for i=1:size(data,2)
    %1st forword propagation
    z2=W1*data(:,i)+b1;
    a2=sigmoid(z2);
    rou(:,i)=a2;
end

rou_mean=zeros(hiddenSize,1);
for i=1:hiddenSize
    rou_mean(i,:)=mean(rou(i,:));
end
    
%step2:compute cost function with regularized decay term and sparse
%penlty term
for i=1:size(data,2)
%for i=1:10
    %2nd forword propagation
    z2=W1*data(:,i)+b1;
    a2=sigmoid(z2);
    z3=W2*a2+b2;
    hy=sigmoid(z3);
    cost=cost+0.5*(sum((hy-data(:,i)).^2));
    
    delta3=(-1.0)*(data(:,i)-hy).*hy.*(1-hy);
    %delta2=(W2'*delta3).*a2.*(1-a2);%without sparse pently term
    delta2=(W2'*delta3+beta*(-1.0*sparsityParam./rou_mean+(1-sparsityParam)./(1-rou_mean))).*a2.*(1-a2);
    
    W1grad=W1grad+delta2*data(:,i)';
    W2grad=W2grad+delta3*a2';
    b1grad=b1grad+delta2;
    b2grad=b2grad+delta3;
end
cost=cost/size(data,2);
%add the regularization
cost=cost+lambda*0.5*(sum(W1(:).^2)+sum(W2(:).^2));
%add the sparse penlty
KL=sum(sparsityParam*log(sparsityParam./rou_mean))+sum((1-sparsityParam)*log((1-sparsityParam)./(1-rou_mean)));
cost=cost+beta*KL;

%step3:update gradient of W1,W2,b1,b2
W1grad=W1grad/size(data,2)+lambda*W1;
W2grad=W2grad/size(data,2)+lambda*W2;
b1grad=b1grad/size(data,2);
b2grad=b2grad/size(data,2);
%}

%{
[n,m] = size(data); % m is the number of traning set,n is the num of features
 
% forward algorithm
% B = repmat(A,M,N) -> replicate and tile an array->MxN
% b1 -> b1 row vector 1xm
z2 = W1*data+repmat(b1,1,m);
a2 = sigmoid(z2);
z3 = W2*a2+repmat(b2,1,m);
a3 = sigmoid(z3);
 
% compute first part of cost
Jcost = 0.5/m*sum(sum((a3-data).^2));
 
% compute the weight decay
Jweight = 1/2* lambda*sum(sum(W1.^2)) + 1/2*lambda*sum(sum(W2.^2));
 
% compute the sparse penalty
% sparsityParam(rho): The desired average activation for the hidden units
% rho(rho^) : the actual average activation of hidden unit
rho = 1/m*sum(a2,2);
Jsparse = beta * sum(sparsityParam.*log(sparsityParam./rho)+...
(1-sparsityParam).*log((1-sparsityParam)./(1-rho)));
 
% the complete cost function
cost = Jcost + Jweight + Jsparse;
 
% backward propagation
% compute gradient
d3 = -(data-a3).*a3.*(1-a3);
% since we introduce the sparsity term--Jsparse in cost function
extra_term = beta*(-sparsityParam./rho+(1-sparsityParam)./(1-rho));
 
% add the extra term
d2 = (W2'*d3 + repmat(extra_term,1,m)).*a2.*(1-a2);
 
% compute W1grad
W1grad = 1/m*d2*data' + lambda*W1;
 
% compute W2grad
W2grad = 1/m*d3*a2'+lambda*W2;
 
% compute b1grad
b1grad = 1/m*sum(d2,2);
 
% compute b2grad
b2grad = 1/m*sum(d3,2);
%}


%-------------------------------------------------------------------
% After computing the cost and gradient, we will convert the gradients back
% to a vector format (suitable for minFunc).  Specifically, we will unroll
% your gradient matrices into a vector.

grad = [W1grad(:) ; W2grad(:) ; b1grad(:) ; b2grad(:)];

end

%-------------------------------------------------------------------
% Here's an implementation of the sigmoid function, which you may find useful
% in your computation of the costs and the gradients.  This inputs a (row or
% column) vector (say (z1, z2, z3)) and returns (f(z1), f(z2), f(z3)). 

function sigm = sigmoid(x)
  
    sigm = 1 ./ (1 + exp(-x));
end

